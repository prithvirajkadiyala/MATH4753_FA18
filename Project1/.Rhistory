{
tabloc = createtable(swd,"predict.loc.50","defect")
tabvg = createtable(swd,"predict.vg.10","defect")
tabevg = createtable(swd,"predict.evg.14.5","defect")
tabivg = createtable(swd,"predict.ivg.9.2","defect")
probs=c("Accuracy","Detection Rate","False Alarm Rate", "Precision")
mths = c("Lines of Code", "Cyclomatic complexity", "Essential complexity", "Design complexity")
alltab = matrix(NA,nr=4,nc=4,dimnames=list(mths,probs) )
as.table(alltab)
}
tab=allmethods(df = swd)
#Creates tables based on the column names given to it.
createtable=function(df,col1,col2){
tab=with(swd, table(df[[col1]],df[[col2]]))
barplot(tab, beside=TRUE, leg=TRUE, main=col1)
tab2=addmargins(tab)
tab2
}
#Example for creating a table.
tabloc = createtable(swd,"predict.loc.50","defect")
tabloc
tabvg = createtable(swd,"predict.vg.10","defect")
tabvg
tabevg = createtable(swd,"predict.evg.14.5","defect")
tabevg
tabivg = createtable(swd,"predict.ivg.9.2","defect")
tabivg
#Creates tables based on the column names given to it.
createtable=function(df,col1,col2){
tab=with(swd, table(df[[col1]],df[[col2]]))
barplot(tab, beside=TRUE, leg=TRUE, main=col1)
tab2=addmargins(tab)
tab2
}
# creating tables.
tabloc = createtable(swd,"predict.loc.50","defect")
tabloc
tabvg = createtable(swd,"predict.vg.10","defect")
tabvg
tabevg = createtable(swd,"predict.evg.14.5","defect")
tabevg
tabivg = createtable(swd,"predict.ivg.9.2","defect")
tabivg
knitr::opts_chunk$set(echo = TRUE)
#Creates tables based on the column names given to it.
createtable=function(df,col1,col2){
tab=with(swd, table(df[[col1]],df[[col2]]))
barplot(tab, beside=TRUE, leg=TRUE, main=col1)
tab2=addmargins(tab)
tab2
}
tabloc = createtable(swd,"predict.loc.50","defect")
tabloc
tabvg = createtable(swd,"predict.vg.10","defect")
tabvg
tabevg = createtable(swd,"predict.evg.14.5","defect")
tabevg
tabivg = createtable(swd,"predict.ivg.9.2","defect")
tabivg
?matrix
probs=c("Accuracy","Detection Rate","False Alarm Rate", "Precision")
mths = c("Lines of Code", "Cyclomatic complexity", "Essential complexity", "Design complexity")
for (i in probs) {
print(i)
}
for (j in mths) {
for (i in probs) {
print(i, j)
}
}
print(i "+" j)
mat = matrix(NA, nrow = length(mths), ncol = length(probs))
for (j in mths) {
for (i in probs) {
mat[i,j]= i+j
}
}
for (j in mths) {
for (i in probs) {
x = c(i,j)
mat[i,j]= paste(x, collapse=" ")
}
}
for (j in mths) {
for (i in probs) {
x = c(i,j)
mat[i,j]= paste(x, collapse=" ", dimnames=list(mths,probs))
}
}
mat = matrix(NA, nrow = length(mths), ncol = length(probs), dimnames=list(mths,probs))
for (j in mths) {
for (i in probs) {
x = c(i,j)
mat[i,j]= paste(x, collapse=" ")
}
}
mat = matrix(NA, nrow = length(mths), ncol = length(probs), dimnames=list(mths,probs))
for (j in mths) {
for (i in probs) {
mat[i,j]=i
}
}
mat = matrix(NA, nrow = length(mths), ncol = length(probs), dimnames=list(mths,probs))
for (j in 1:4) {
for (i in 1:4) {
mat[i,j]=i
}
}
mat
for (j in 1:length(mths)) {
for (i in 1:length(probs)) {
mat[i,j]=i
}
}
mat
for (j in 1:length(mths)) {
for (i in 1:length(probs)) {
mat[i,j]=probs[i]
}
}
mat
mat[i,j]=probs[j]
for (i in 1:length(probs)) {
mat[i,j]=probs[j]
}
for (j in 1:length(mths)) {
for (i in 1:length(probs)) {
mat[i,j]=probs[j]
}
}
mat
mat[i,j]=mths[i]
for (i in 1:length(probs)) {
mat[i,j]=mths[i]
}
for (j in 1:length(mths)) {
for (i in 1:length(probs)) {
mat[i,j]=mths[i]
}
}
mat
a = with(tabloc,tabloc[FALSE & no,])
if(i==1){
a = with(tabloc,tabloc[FALSE & no,])
}
mat[i,j]=mths[i]
for (i in 1:length(probs)) {
if(i==1){
a = with(tabloc,tabloc[FALSE & no,])
}
mat[i,j]=mths[i]
}
for (j in 1:length(mths)) {
for (i in 1:length(probs)) {
if(i==1){
a = with(tabloc,tabloc[FALSE & no,])
}
mat[i,j]=mths[i]
}
}
tabloc[1,1]
mat = matrix(NA, nrow = length(mths), ncol = length(probs), dimnames=list(mths,probs))
for (j in 1:length(mths)) {
if(j==1){
a = tabloc[1,1]
b = tabloc[1,2]
c = tabloc[2,1]
d = tabloc[2,2]
}
else if(j==2){
a = tabvg[1,1]
b = tabvg[1,2]
c = tabvg[2,1]
d = tabvg[2,2]
}
else if(j==3){
a = tabevg[1,1]
b = tabevg[1,2]
c = tabevg[2,1]
d = tabevg[2,2]
}
else{
a = tabivg[1,1]
b = tabivg[1,2]
c = tabivg[2,1]
d = tabivg[2,2]
}
#Calculate a,b,c,d here
for (i in 1:length(probs)) {
if(i==1){
mat[i,j] = acc(a,b,c,d)
}
else if(i==2){
mat[i,j] = detect(b,d)
}
else if(i==3){
mat[i,j] = falarm(a,c)
}
else{
mat[i,j] = prec(c,d)
}
}
}
mat
mat = matrix(NA, nrow = length(mths), ncol = length(probs), dimnames=list(mths,probs))
for (i in 1:length(mths)) {
if(i==1){
a = tabloc[1,1]
b = tabloc[1,2]
c = tabloc[2,1]
d = tabloc[2,2]
}
else if(i==2){
a = tabvg[1,1]
b = tabvg[1,2]
c = tabvg[2,1]
d = tabvg[2,2]
}
else if(i==3){
a = tabevg[1,1]
b = tabevg[1,2]
c = tabevg[2,1]
d = tabevg[2,2]
}
else{
a = tabivg[1,1]
b = tabivg[1,2]
c = tabivg[2,1]
d = tabivg[2,2]
}
#Calculate a,b,c,d here
for (j in 1:length(probs)) {
if(j==1){
mat[i,j] = acc(a,b,c,d)
}
else if(j==2){
mat[i,j] = detect(b,d)
}
else if(j==3){
mat[i,j] = falarm(a,c)
}
else{
mat[i,j] = prec(c,d)
}
}
}
mat
View(detect)
acc=function(a,b,c,d)
{
accuracy = (a+d)/(a+b+c+d)
round(accuracy,3)
}
detect=function(b,d)
{
detectionrate = d/(b+d)
round(detectionrate,3)
}
falarm=function(a,c)
{
falsealarm = c/(a+c)
round(falsealarm,3)
}
prec=function(c,d)
{
precision=d/(c+d)
round(precision,3)
}
#Creates tables based on the column names given to it.
createtable=function(df,col1,col2){
tab=with(swd, table(df[[col1]],df[[col2]]))
barplot(tab, beside=TRUE, leg=TRUE, main=col1)
tab2=addmargins(tab)
tab2
}
tabloc = createtable(swd,"predict.loc.50","defect")
tabloc
mat = matrix(NA, nrow = length(mths), ncol = length(probs), dimnames=list(mths,probs))
for (i in 1:length(mths)) {
if(i==1){
a = tabloc[1,1]
b = tabloc[1,2]
c = tabloc[2,1]
d = tabloc[2,2]
}
else if(i==2){
a = tabvg[1,1]
b = tabvg[1,2]
c = tabvg[2,1]
d = tabvg[2,2]
}
else if(i==3){
a = tabevg[1,1]
b = tabevg[1,2]
c = tabevg[2,1]
d = tabevg[2,2]
}
else{
a = tabivg[1,1]
b = tabivg[1,2]
c = tabivg[2,1]
d = tabivg[2,2]
}
#Calculate a,b,c,d here
for (j in 1:length(probs)) {
if(j==1){
mat[i,j] = acc(a,b,c,d)
}
else if(j==2){
mat[i,j] = detect(b,d)
}
else if(j==3){
mat[i,j] = falarm(a,c)
}
else{
mat[i,j] = prec(c,d)
}
}
}
mat
allmethods = function(df) # dataframe
{
tabloc = createtable(swd,"predict.loc.50","defect")
tabvg = createtable(swd,"predict.vg.10","defect")
tabevg = createtable(swd,"predict.evg.14.5","defect")
tabivg = createtable(swd,"predict.ivg.9.2","defect")
probs=c("Accuracy","Detection Rate","False Alarm Rate", "Precision")
mths = c("Lines of Code", "Cyclomatic complexity", "Essential complexity", "Design complexity")
mat = matrix(NA, nrow = length(mths), ncol = length(probs), dimnames=list(mths,probs))
for (i in 1:length(mths)) {
if(i==1){
a = tabloc[1,1]
b = tabloc[1,2]
c = tabloc[2,1]
d = tabloc[2,2]
}
else if(i==2){
a = tabvg[1,1]
b = tabvg[1,2]
c = tabvg[2,1]
d = tabvg[2,2]
}
else if(i==3){
a = tabevg[1,1]
b = tabevg[1,2]
c = tabevg[2,1]
d = tabevg[2,2]
}
else{
a = tabivg[1,1]
b = tabivg[1,2]
c = tabivg[2,1]
d = tabivg[2,2]
}
#Calculate a,b,c,d here
for (j in 1:length(probs)) {
if(j==1){
mat[i,j] = acc(a,b,c,d)
}
else if(j==2){
mat[i,j] = detect(b,d)
}
else if(j==3){
mat[i,j] = falarm(a,c)
}
else{
mat[i,j] = prec(c,d)
}
}
}
mat
as.table(mat)
}
tab=allmethods(df = swd)
allmethods = function(df) # dataframe
{
tabloc = createtable(swd,"predict.loc.50","defect")
tabvg = createtable(swd,"predict.vg.10","defect")
tabevg = createtable(swd,"predict.evg.14.5","defect")
tabivg = createtable(swd,"predict.ivg.9.2","defect")
probs=c("Accuracy","Detection Rate","False Alarm Rate", "Precision")
mths = c("Lines of Code", "Cyclomatic complexity", "Essential complexity", "Design complexity")
mat = matrix(NA, nrow = length(mths), ncol = length(probs), dimnames=list(mths,probs))
for (i in 1:length(mths)) {
if(i==1){
a = tabloc[1,1]
b = tabloc[1,2]
c = tabloc[2,1]
d = tabloc[2,2]
}
else if(i==2){
a = tabvg[1,1]
b = tabvg[1,2]
c = tabvg[2,1]
d = tabvg[2,2]
}
else if(i==3){
a = tabevg[1,1]
b = tabevg[1,2]
c = tabevg[2,1]
d = tabevg[2,2]
}
else{
a = tabivg[1,1]
b = tabivg[1,2]
c = tabivg[2,1]
d = tabivg[2,2]
}
#Calculate a,b,c,d here
for (j in 1:length(probs)) {
if(j==1){
mat[i,j] = acc(a,b,c,d)
}
else if(j==2){
mat[i,j] = detect(b,d)
}
else if(j==3){
mat[i,j] = falarm(a,c)
}
else{
mat[i,j] = prec(c,d)
}
}
}
mat
as.table(mat)
}
tab=allmethods(df = swd)
tab
allmethods = function(df) # dataframe
{
tabloc = createtable(df,"predict.loc.50","defect")
tabloc
tabvg = createtable(df,"predict.vg.10","defect")
tabvg
tabevg = createtable(df,"predict.evg.14.5","defect")
tabevg
tabivg = createtable(df,"predict.ivg.9.2","defect")
tabivg
probs=c("Accuracy","Detection Rate","False Alarm Rate", "Precision")
mths = c("Lines of Code", "Cyclomatic complexity", "Essential complexity", "Design complexity")
mat = matrix(NA, nrow = length(mths), ncol = length(probs), dimnames=list(mths,probs))
for (i in 1:length(mths)) {
if(i==1){
a = tabloc[1,1]
b = tabloc[1,2]
c = tabloc[2,1]
d = tabloc[2,2]
}
else if(i==2){
a = tabvg[1,1]
b = tabvg[1,2]
c = tabvg[2,1]
d = tabvg[2,2]
}
else if(i==3){
a = tabevg[1,1]
b = tabevg[1,2]
c = tabevg[2,1]
d = tabevg[2,2]
}
else{
a = tabivg[1,1]
b = tabivg[1,2]
c = tabivg[2,1]
d = tabivg[2,2]
}
#Calculate a,b,c,d here
for (j in 1:length(probs)) {
if(j==1){
mat[i,j] = acc(a,b,c,d)
}
else if(j==2){
mat[i,j] = detect(b,d)
}
else if(j==3){
mat[i,j] = falarm(a,c)
}
else{
mat[i,j] = prec(c,d)
}
}
}
mat
as.table(mat)
}
tab=allmethods(df = swd)
tab
#Creates tables based on the column names given to it.
createtable=function(df,col1,col2, header){
tab=with(df, table(df[[col1]],df[[col2]]))
barplot(tab, beside=TRUE, leg=TRUE, main=header)
tab2=addmargins(tab)
tab2
}
View(tablecreate)
View(createtable)
tabloc = createtable(swd,"predict.loc.50","defect", header="Line of Code")
tabloc
tabvg = createtable(swd,"predict.vg.10","defect", header="Cyclomatic Complexity")
tabvg
tabevg = createtable(swd,"predict.evg.14.5","defect", header="Essential Complexity")
tabevg
tabivg = createtable(swd,"predict.ivg.9.2","defect", header="Design Complexity")
tabivg
#Creates tables based on the column names given to it.
createtable=function(df,col1,col2, header="Barplot"){
tab=with(df, table(df[[col1]],df[[col2]]))
barplot(tab, beside=TRUE, leg=TRUE, main=header)
tab2=addmargins(tab)
tab2
}
