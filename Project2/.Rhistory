knitr::opts_chunk$set(echo = TRUE)
df = read.table("T8-5.DAT")
setwd("C:/Users/stew9983/Google Drive/MULTIVARIATE-OU - 2016/Laboratories/pc")
setwd("C:/Users/stew9983/OneDrive - University of Oklahoma/2017-canvas-math4753/Project/Rmd-Template")
mynewt=function(x0,delta=0.001,f,fdash){
d=1000
i=0
x=c()
y=c()
x[1]=x0
y[1]=f(x[1])
while(d > delta & i<10000){
i=i+1
x[i+1]=x[i]-f(x[i])/fdash(x[i])
y[i+1]=f(x[i+1])
d=abs(y[i+1])
}
curve(f(x),xlim=range(c(range(x),-range(x))),xaxt="n", main="Newton-Raphson Algorithm")
points(x,y,col="Red",pch=19,cex=1.5)
axis(1,x,round(x,2),las=2)
abline(h=0,col="Red")
segments(x[1:(i-1)],y[1:(i-1)],x[2:i],rep(0,i-1),col="Blue",lwd=2)
segments(x[2:i],rep(0,i-1),x[2:i],y[2:i],lwd=0.5,col="Pink")
list(x=x,y=y)
}
mynewt(x0=10,delta=0.0001,f=function(x) x^2-4,fdash=function(x) 2*x )
# various log likelihoods defined
logbin=function(x,param) log(dbinom(x,prob=param,size=10))
#max likelihood function
## For repeated sampling from same distribution
mymaxlik=function(lfun,x,param,...){
# how many param values are there?
np=length(param)
# outer -- notice the order, x then param
# this produces a matrix -- try outer(1:4,5:10,function(x,y) paste(x,y,sep=" "))   to understand
z=outer(x,param,lfun)
# z is a matrix where each x,param is replaced with the function evaluated at those values
y=apply(z,2,sum)
# y is a vector made up of the column sums
# Each y is the log lik for a new parameter value
plot(param,y,col="Blue",type="l",lwd=2,...)
# which gives the index for the value of y == max.
# there could be a max between two values of the parameter, therefore 2 indices
# the first max will take the larger indice
i=max(which(y==max(y)))
abline(v=param[i],lwd=2,col="Red")
# plots a nice point where the max lik is
points(param[i],y[i],pch=19,cex=1.5,col="Black")
axis(3,param[i],round(param[i],2))
#check slopes. If it is a max the slope shoud change sign from + to
# We should get three + and two -vs
ifelse(i-3>=1 & i+2<=np, slope<-(y[(i-2):(i+2)]-y[(i-3):(i+1)])/(param[(i-2):(i+2)]-param[(i-3):(i+1)]),slope<-"NA")
return(list(i=i,parami=param[i],yi=y[i],slope=slope))
}
windows()
mymaxlik(x=c(9,9,1,9,9,9),param=seq(0,1,length=1000),lfun=logbin,xlab=expression(pi),main="Binomial",cex.main=2)
mymld=function(lfun,x,param,delta=0.0001){    # param = parameter values, delta=accuracy, x=data
z=outer(x,param,lfun)    # create outer product and evaluate at lfun
y=apply(z,2,sum) # x by param, 2=columns , sum columns = sum of log lik
i=max(which(y==max(y)))# the index for which y is biggest, if two then take the last one
param2=seq(param[i-2],param[i+2],by=delta)# The maximum will be between these two, increments by delta
zz=outer(x,param2,lfun) # new z, call it zz
yy=apply(zz,2,sum)   # new y, call it yy
ii=max(which(yy==max(yy)))# new i,  call it ii , if two, take max of them (last one)
layout(matrix(c(1,2),nr=1,nc=2,byrow=TRUE))# divide plotting space for two graphs
plot(param,y,col="Blue",type="l",lwd=2,ylab="Log. Lik.",xlab=expression(theta))# plot log lik Vs parameter values
abline(v=param[i],lwd=2,col="Red") # Show vertical line at estimated value
axis(3,param[i],round(param[i],2))
points(param[i],y[i],pch=19,cex=1.5,col="Black")# Plot the point
plot(param2,yy,col="Blue",type="l",lwd=2,ylab="Log. Lik.",xlab=expression(theta),las=2) # construct new plot for refined estimate
abline(v=param2[ii],lwd=2,col="Red")  # new verical line
val=round(param2[ii],abs(log10(delta))) ## rounds to the nth place where n is st delta=10^-n.
axis(3,param2[ii],val)
points(param2[ii],yy[ii],pch=19,cex=1.5,col="Black")
}
mymld(x=c(5,5,6,6,6,6),param=seq(0,1,length=1000),lfun=logbin,delta=0.000001)
install.packages("pca3d")
df = read.table("T8-5.DAT")
names(df) = c("pop","deg","emp>16","govemp","medHV")
head(df)
xbar=apply(df,2, mean)
xbar
S=cov(df)
eigen(S)
pr = prcomp(S)
library(pca3d)
pca3d(pr)
mtcars
cars
head(cars)
head(mtcars)
knitr::opts_chunk$set(echo = TRUE)
dataset = cars
dataset
dataset = mtcars
dataset
install.packages("leaflet")
install.packages("dplyr")
?read.csv
knitr::opts_chunk$set(echo = TRUE)
library(leaflet)
library(dplyr)
dataset = read.csv("Emp_Salary.csv",header=TRUE,sep=",")
head(dataset)
names(dataset)
library(ggplot2)
g = ggplot(dataset, aes(x = YrsExper, y = Salary, color = EduLev)) + geom_point()
g = g + geom_smooth(method = "loess")
g
library(ggplot2)
g = ggplot(dataset, aes(x = YrsExper, y = Salary, color = EducLev)) + geom_point()
g = g + geom_smooth(method = "loess")
g
?ggplot2
library(ggplot2)
g = ggplot(dataset, aes(x = YrsExper, y = Salary, color = EducLev)) + geom_point()
g = g = xlab("Years of Experience")
g = g + geom_smooth(method = "loess")
g
library(ggplot2)
g = ggplot(dataset, aes(x = YrsExper, y = Salary, color = EducLev)) + geom_point()
g = g + xlab("Years of Experience")
g = g + geom_smooth(method = "loess")
g
library(s20x)
pairs20x(dataset)
library(ggplot2)
g = ggplot(dataset, aes(x = JobGrade, y = Salary, color = EducLev)) + geom_point()
g = g + xlab("Years of Experience")
g = g + geom_smooth(method = "loess")
g
library(ggplot2)
g = ggplot(dataset, aes(x = YrsExper, y = Salary, color = EducLev)) + geom_point()
g = g + xlab("Years of Experience")
g = g + geom_smooth(method = "loess")
g
library(ggplot2)
g = ggplot(dataset, aes(x = Age, y = Salary, color = EducLev)) + geom_point()
g = g + xlab("Years of Experience")
g = g + geom_smooth(method = "loess")
g
library(ggplot2)
g = ggplot(dataset, aes(x = Age, y = Salary, color = Gender)) + geom_point()
g = g + xlab("Years of Experience")
g = g + geom_smooth(method = "loess")
g
library(ggplot2)
g = ggplot(dataset, aes(x = YrsExper, y = Salary, color = Gender)) + geom_point()
g = g + xlab("Years of Experience")
g = g + geom_smooth(method = "loess")
g
library(ggplot2)
g = ggplot(dataset, aes(x = YrsExper, y = Salary, color = EducLev)) + geom_point()
g = g + xlab("Years of Experience")
g = g + geom_smooth(method = "loess")
g
trendscatter(YrsExper~Salary,f=0.5,data=dataset)
dataset.lm=lm(YrsExper~Salary,data=dataset)
summary(dataset.lm)
dataset.lm=lm(YrsExper~Salary,data=dataset)
summary(dataset.lm)
height.res=residuals(dataset.lm)
height.fit=fitted(dataset.lm)
plot(height.fit,height.res, xlab="Fitted", ylab="Residuals")
dataset.lm=lm(YrsExper~Salary,data=dataset)
summary(dataset.lm)
Yrs.res=residuals(dataset.lm)
Yrs.fit=fitted(dataset.lm)
plot(Yrs.fit,Yrsheight.res, xlab="Fitted", ylab="Residuals", title="Fitted vs Residuals")
dataset.lm=lm(YrsExper~Salary,data=dataset)
summary(dataset.lm)
Yrs.res=residuals(dataset.lm)
Yrs.fit=fitted(dataset.lm)
plot(Yrs.fit,Yrs.res, xlab="Fitted", ylab="Residuals", title="Fitted vs Residuals")
?plot
dataset.lm=lm(YrsExper~Salary,data=dataset)
summary(dataset.lm)
Yrs.res=residuals(dataset.lm)
Yrs.fit=fitted(dataset.lm)
plot(Yrs.fit,Yrs.res, xlab="Fitted", ylab="Residuals", main="Fitted vs Residuals")
trendscatter(Yrs.fit,Yrs.res, xlab="Fitted", ylab="Residuals")
plot(dataset.lm, which =1)
normcheck(dataset.lm,shapiro.wilk = TRUE)
